; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "127.0.0.1"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(repl-server {:host "127.0.0.1"})

(defn consumer-service? [event]
  (when-let [service-name (:service event)]
    (re-matches #".*consumer.*" service-name)))

(let [index (index)
      email (mailer {:from "riemann@tiuhti.net"})
      free-space-limit-percentage 10
      df-email (mailer {:from "riemann@tiuhti.net"}
                       {:body (fn [[e :as events]]
                                (if (= 1 (count events))
                                  (str "free space "
                                       (format "%.02f" (:metric e))
                                       " below "
                                       free-space-limit-percentage
                                       "% on host"
                                       (:host e)
                                       " in mount point "
                                       (:plugin_instance e))
                                  (str "Check free space on hosts "
                                       (clojure.string/join "," (set (map :host events)))
                                       " on mount points "
                                       (clojure.string/join "," (set (map :plugin_instance events))))))})]
  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      ;; Index all events immediately.
      index

      #_(info "event" %)

      ;; Log expired events.
      (expired
        (fn [event]
          (info "expired" event)))

      (where (and (= "percent_bytes" (:type event))
                  (= "free" (:type_instance event))
                  (< metric free-space-limit-percentage))
        (with :state "fail"
          (rollup 3 120
            (df-email "kimmo@tiuhti.net"))))

      (where (tagged-any "rate")
        (where (and (service #".*messages.*")
                    (< metric 3))
          (rollup 3 120
            (fn [[e :as events]]
              (if (= (count events) 1)
                (info "too low messages rate" (:metric e) "for service" (:service e))
                (info "too low messages rate for the last two minutes for" (count events) "events")))))
        #(info (:service %) (:metric %)))

      (by [:host :service]
        (where (and (= "derive" (:type event))
                    (not (tagged-any? ["rate"] event)))
          (ddt
           (smap #(assoc %
                         :service (str (:service %) " rate")
                         :tags (conj (:tags %) "rate"))
             reinject)))
        (changed :state {:init "ok"}
          (where (consumer-service? event)
            #(info "consumer service" (:service %) "state changed to" (:state %))))))))
