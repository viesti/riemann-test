; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "127.0.0.1"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(repl-server {:host "127.0.0.1"})

(defn consumer-service? [event]
  (when-let [service-name (:service event)]
    (re-matches #".*consumer.*" service-name)))

(let [index (index)
      email (mailer {:from "riemann@tiuhti.net"})]
  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      ;; Index all events immediately.
      index

      #_(info "event" %)

      ;; Log expired events.
      (expired
        (fn [event]
          (info "expired" event)))

      (where (tagged-any "rate")
        #(info (:service %) (:metric %)))

      (by [:host :service]
        (where (and (service #".*derive.*")
                    (not (tagged-any? ["rate"] event)))
          (ddt
           (smap #(assoc %
                         :service (str (:service %) " rate")
                         :tags (conj (:tags %) "rate"))
             reinject)))
        (changed :state {:init "ok"}
          (where (consumer-service? event)
            #(info "consumer service" (:service %) "state changed to" (:state %))))))))

